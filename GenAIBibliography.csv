Name, File, Prompt
Cursor AI, src/middleware/user.js, Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed. Cognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard to read, understand, test, and modify. As a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces. Which syntax in code does impact cognitive complexity score? Here are the core concepts: Cognitive complexity is incremented each time the code breaks the normal linear reading flow. This concerns, for example, loop structures, conditionals, catches, switches, jumps to labels, and conditions mixing multiple operators. Each nesting level increases complexity. During code reading, the deeper you go through nested layers, the harder it becomes to keep the context in mind. Method calls are free A well-picked method name is a summary of multiple lines of code. A reader can first explore a high-level view of what the code is performing then go deeper and deeper by looking at called functions content. Note: This does not apply to recursive calls, those will increment cognitive score. The method of computation is fully detailed in the pdf linked in the resources. What is the potential impact? Developers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of maintenance. Exceptions Cognitive complexity calculations exclude logical expressions using the || and ?? operators when applied within the context of default value code patterns.
